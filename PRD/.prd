# 설교문 작성 프로그램(.prd)를 상세하게 단계적으로 분석하여 코딩해 주세요. 특히, 2.기능 요구사항을 꼼꼼히 읽고 해당 기능이 완벽하게 작동할 수 있도록 해주고 10. UI 구성 요구 사항대로 UI를 만들어 주세요.

설교문 작성 프로그램 (PRD) 

1. 개요
1.1 목적
이 설교문 작성 프로그램은 기독교 설교자의 설교문 작성을 지원하는 도구로, 사용자가 설교 주제나 성경 구절을 입력하면 ChatGPT를 통해 자동으로 설교문을 생성합니다. 이로써 설교 준비 시간을 줄이고, 창의적이고 신학적으로 균형 잡힌 설교문 작성을 도와줍니다.
1.2 대상 사용자
- 목회자, 신학생, 평신도 리더
- 성경을 기반으로 메시지를 전달하고자 하는 사람


2. 기능 요구사항 (PRD)

2.1 주요 기능
2.1.1 프롬프트 작성 영역
1. "API Key" : Inputbox(형식:Password) 
  - "API Key"를 입력하면 json 파일에 저장하고, 프로그램 시작 시 "API Key"를 불러오는 기능
2. "설교 주제", "성경 구절" : Radio Button(아래 위 2줄로 구성)
  - 설교 주제 또는 성경 구절 중 하나를 선택하는 기능
3. "설교 주제 또는 성경 구절" : input Box
  - 설교 주제 또는 성경 구절을 직접 입력하는 기능
4. "설교 분량(분)" : Stepper Button
  - 기본: 5분, 직접 입력도 가능한 기능
5. "설교 대상" : Select Box
  - 성도, 어린이, 청소년, 청년, 장년, 성경학교, 수련회, 교역자, 부흥회 중 하나를 선택하는 기능 
6. "설교문 생성" : Command Button
   - 사용자의 입력 및 선택을 기반으로 하여 추가 내용을 포함하여 <프롬프트>를 작성하는 기능
    (추가 내용 : prompt.txt 파일을 가져와서 <프롬프트>에 추가하여 작성)
   - 작성된 <프롬프트>로 CHAT GPT API에게 응답을 요청하여 설교문을 생성하여 [설교문 작성 영역]에 출력하는 기능

2.1.2 설교문 작성 영역
- 설교문 출력은 반드시 마크다운 방식으로 세련된 HTML 스타일로 출력
1. "수정하기", "적용하기" : 토글 Command Button
  - "수정하기"는 출력된 {설교문}을 마크다운 형식으로 바꾼 후 내용을 수정하는 기능 
  - "적용하기"는 수정된 {설교문}을 HTML 스타일로 바꾸어 적용하는 기능
2. "PDF 저장" : Command Button
    - {설교문}을 PDF 파일로 저장하는 기능
3. "출력하기" : Command Button
    - {설교문}을 프린터기로 출력하는 기능
4. "설교저장" : Command Button
    - {설교문}을 json으로 저장하여 [저장된 설교 영역]에 저장하는 기능
    (저장 파일명은 제목: 설교제목 | 성경구절: 성경구절 | 대상: 설교대상 | 분량: 설교분량(분)) 

2.1.3 저장된 설교 영역
1. 프로그램이 시작되면 저장된 설교문 파일이 있으면 "리스트 형식"으로 불러올 수 있는 기능
2. 불려진 설교문 파일명을 클릭하면 [설교문 작성 영역]에 설교문 내용을 출력할 수 있는 기능
  (설교문 파일명에 마우스를 올리면 마우스 커서 모양(손 모양) 변경)
3. 다른 설교문 파일명을 클릭하면 해당되는 파일 내용을 [설교문 작성 영역]에 불러올 수 있는 기능
4. "삭제" : Command Button
  -해당 설교문 파일을 삭제할 수 있는 기능 

2.1.4 사용자 편의 기능
- API Key는 ChatGPT API Key 호출 시 사용. 입력받은 내용은 json에 저장하고 프로그램 시작 시 불러오기 수행
- 저장된 설교문 파일을 클릭할 때마다 해당하는 설교문 내용을 [설교문 작성 영역]에 불러오는 기능
- 설교문 생성 중에는 다른 모든 버튼에 대한 비활성화, 설교문 생성 완료 시에는 활성화되도록 하는 기능
- 자동 스크롤 기능
- 반응형 웹 UI 제공(모바일, 태블릿, 데스크탑)


3. 사용자 플로우
3.1 프롬프트 작성 영역
1. 사용자가 설교 주제, 성경 구절 중 하나를 Radio Button을 사용하여 선택한다.
2. 사용자가 선택된 내용에 맞게 설교 주제 또는 성경 구절을 입력한다.
3. 사용자가 설교 분량(분)을 Stepper Button을 이용하여 선택한다.
4. 사용자가 설교대상자를 Select Box을 이용하여 선택한다.
5. 사용자가 설교문 생성 Command Button을 클릭하여 <프롬프트>를 작성한다.
6. 생성된 <프롬프트>를 CHAT GPT API에게 응답을 요청하여 설교문을 생성하여 출력한다.

3.2 설교문 작성 영역
1. 출력된 설교문을 "수정하기/적용하기" 버튼을 클릭하여 수정(마크다운) 및 적용(HTML)한다.
2. 출력된 설교문을 "PDF저장" 버튼을 클릭하여 PDF 파일로 저장한다. 
3. 출력된 설교문을 "설교저장" 버튼을 클릭하여 json 파일로 저장한다.
4. 출력된 설교문을 "출력하기" 버튼을 클릭하여 프린터기로 출력한다.

3.3 저장된 설교 영역
1. 저장된 설교문 파일을 클릭하면 설교내역을 [설교문 작성 영역]에 불러온다.
2. 저장된 설교문 파일 리스트 내역을 "삭제" 버튼을 눌러 삭제한다.
 

4. 비기능 요구사항
- 성능: CHAT GPT 응답은 5초 이내에 반환되어야 한다.
- OPENAI 라이브러리의 버전은 최신 버전을 사용한다.
- 보안: 입력/출력 데이터는 클라이언트에서만 저장되며 서버 저장은 하지 않는다.
- 접근성: 고대비 모드 및 글꼴 크기 조절 기능 제공.
- 반응성: 다양한 화면 크기 대응.


5. 시스템 아키텍처
[Frontend (React)] 
   ↓ REST API
[Backend (Node.js, Express)] 
   ↓ HTTPS 요청
[OpenAI GPT-4o API]


6. 기술 스택
- 프론트엔드: React, TailwindCSS, Zustand 또는 Redux, React-Quill
- 백엔드: Node.js, Express 또는 Next.js API
- AI 연동: OpenAI GPT-4o API
- 저장 기능: html2pdf.js, FileSaver.js
- 배포: Vercel, Netlify, AWS S3


7. 컴포넌트 구조
- PromptInputComponent: 사용자 입력, 프롬프트 작성, CHAT GPT API 요청
- SermonOutputComponent: 작성된 설교문 관리(수정&저장, PDF저장, 출력, 설교저장 등)
- SermonStorageComponent: 저장된 설교 내역 관리(불러오기, 삭제 등)


8. API 설계

POST /api/generate-sermon
Request Body:
{
  "prompt": "프롬프트",
}
Response:
{
  "sermon": "완성된 설교문"
}


9. 실제 프로젝트 디렉토리 구조
/Sermon
├── server/
│   ├── server.js
│   └── package.json
├── public/
├── src/
│   ├── components/
│   │   ├── PromptInput.tsx
│   │   ├── SermonOutput.tsx
│   │   └── SermonStorage.tsx
│   ├── pages/
│   │   └── index.tsx
│   ├── utils/
│   │   └── api.ts
│   ├── styles/
│   │   └── globals.css
│   ├── types/
│   │    └── sermon.ts
│   ├── App.tsx
│   ├── index.tsx
├── package.json
├── tsconfig.json
└── README.md

10. UI 구성
- UI 구성은 영역별로 그룹을 만들어 명확하게 구분할 수 있도록 작성해야 함
10.1 프롬프트 작성 영역
1. "API Key"(Inputbox) : [프롬프트 작성 영역]의 1행 중앙에 배치  
2. "설교 주제", "성경 구절"(Radio Button) : 2행("설교 주제"), 3행("성경 구절")
3. "설교 주제 또는 성경 구절"(input Box) : 2행과 3행 중간, Radio Button 오른쪽 옆에 배치
4. "설교 분량"(Stepper Button) : 2행과 3행 중간, input Box 오른쪽 옆에 배치
5. "설교 대상"(Select Box) : 2행과 3행 중간, Stepper Button 오른쪽 옆에 배치
6. "설교문 생성"(Command Button) : 2행과 3행 중간, Select Box 오른쪽 옆에 배치

10.2 설교문 작성 영역
1. {설교문} 내용은 [설교문 작성 영역]의 1행부터 배치 
  - 설교문 내용은 반드시 마크다운 텍스트 방식으로 세련된 HTML 스타일로 출력
2. "설교저장"(Command Button) : {설교문} 내용 아래 줄 제일 오른쪽에 배치
3. "출력하기"(Command Button) : "설교저장"(Command Button) 같은 줄 바로 앞에 배치
4. "PDF 저장"(Command Button) : "출력하기"(Command Button) 같은 줄 바로 앞에 배치
5. "수정하기", "적용하기"(Command Button) : 같은 줄 제일 왼쪽에 배치

10.3 저장된 설교 영역
1. 설교문 파일명(리스트 형식)을 [저장된 설교 영역] 왼쪽부터 최근에 작성된 순서로 열거하여 배치
2. "삭제"(Command Button) 버튼은 설교문 파일명 제일 오른쪽에 배치
